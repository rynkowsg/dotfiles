;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{;; Paths
 ;; Directories in the current project to include in the classpath
 :paths
 ["src"]

 ;; External dependencies
 :deps
 {org.clojure/clojure {:mvn/version "1.10.2"}}

 ;; Aliases
 ;;   resolve-deps aliases (-R) affect dependency resolution, options:
 ;;     :extra-deps - specifies extra deps to add to :deps
 ;;     :override-deps - specifies a coordinate to use instead of that in :deps
 ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
 ;;   make-classpath aliases (-C) affect the classpath generation, options:
 ;;     :extra-paths - vector of additional paths to add to the classpath
 ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps
 :aliases
 #:g{;; pull in specific versions of Clojure:
     :v1.0
     {:override-deps {org.clojure/clojure {:mvn/version "1.0.0"}}}
     :v1.1
     {:override-deps {org.clojure/clojure {:mvn/version "1.1.0"}}}
     :v1.2
     {:override-deps {org.clojure/clojure {:mvn/version "1.2.1"}}}
     :v1.3
     {:override-deps {org.clojure/clojure {:mvn/version "1.3.0"}}}
     :v1.4
     {:override-deps {org.clojure/clojure {:mvn/version "1.4.0"}}}
     :v1.5
     {:override-deps {org.clojure/clojure {:mvn/version "1.5.1"}}}
     :v1.6
     {:override-deps {org.clojure/clojure {:mvn/version "1.6.0"}}}
     :v1.7
     {:override-deps {org.clojure/clojure {:mvn/version "1.7.0"}}}
     :v1.8
     {:override-deps {org.clojure/clojure {:mvn/version "1.8.0"}}}
     :v1.9
     {:override-deps {org.clojure/clojure {:mvn/version "1.9.0"}}}
     :v1.10.0
     {:override-deps {org.clojure/clojure {:mvn/version "1.10.0"}}}
     :v1.10.1
     {:override-deps {org.clojure/clojure {:mvn/version "1.10.1"}}}
     :v1.10.2
     {:override-deps {org.clojure/clojure {:mvn/version "1.10.2"}}}
     :v1.10.3
     {:override-deps {org.clojure/clojure {:mvn/version "1.10.3"}}}
     :v1.10
     {:override-deps {org.clojure/clojure {:mvn/version "1.10.3"}}}
     :v1.11
     {:override-deps {org.clojure/clojure {:mvn/version "1.11.0-alpha2"}}}
     ;; master has just become 1.11:
     :master
     {:override-deps {org.clojure/clojure {:mvn/version "1.11.1-master-SNAPSHOT"}}}

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; REPL / nREPL / REBL
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     :dev
     {:extra-deps {org.clojure/tools.deps.alpha {:git/url "https://github.com/clojure/tools.deps.alpha"
                                                 :sha     "83a477b305839c697666401508c395cfed29506a"}}}
     ; Example usage:
     ;(comment
     ;  (require '[clojure.tools.deps.alpha.repl :refer [add-libs] :as deps-repl])
     ;  (deps-repl/libs)
     ;  (deps-repl/current-basis)
     ;  (add-libs '{babashka/fs                     {:mvn/version "0.1.0"}
     ;              clj-commons/fs                  {:mvn/version "1.6.309"}}))

     ;; start a modern nREPL server on a random available port
     :nrepl
     {:extra-deps {nrepl/nrepl {:mvn/version "0.8.3"}}
      :main-opts  ["-m" "nrepl.cmdline"]}

     ;; start a Rebel REPL
     :rebel
     {:extra-deps {; https://github.com/bhauman/rebel-readline
                   com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
      :main-opts  ["-m" "rebel-readline.main"]}

     ;; start nREPL server & Rebel
     :rebel-nrepl
     {:extra-deps {nrepl/nrepl                {:mvn/version "0.8.3"}
                   com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
      :main-opts  ["--main" "nrepl.cmdline" "--interactive"
                   "--repl-fn" "rebel-readline.main/-main"]}

     ;; start REBL
     :rebl-8
     {:extra-deps {org.clojure/core.async {:mvn/version "1.3.622"}
                   ;; deps for file datafication (REBL 0.9.149 or later)
                   org.clojure/data.csv   {:mvn/version "1.0.0"}
                   org.clojure/data.json  {:mvn/version "2.4.0"}
                   org.yaml/snakeyaml     {:mvn/version "1.29"}
                   ;; assumes you've installed the latest Cognitect dev-tools:
                   com.cognitect/rebl     {:mvn/version "0.9.242"}}
      :main-opts  ["-m" "cognitect.rebl"]}

     ;; start REBL on JVM 11
     :rebl-11
     {:extra-deps {org.clojure/core.async      {:mvn/version "1.3.622"}
                   ;; deps for file datafication (REBL 0.9.149 or later)
                   org.clojure/data.csv        {:mvn/version "1.0.0"}
                   org.clojure/data.json       {:mvn/version "2.4.0"}
                   org.yaml/snakeyaml          {:mvn/version "1.29"}
                   ;; assumes you've installed the latest Cognitect dev-tools:
                   com.cognitect/rebl          {:mvn/version "0.9.242"}
                   ;; JavaFX deps
                   org.openjfx/javafx-fxml     {:mvn/version "18-ea+4"}
                   org.openjfx/javafx-controls {:mvn/version "18-ea+4"}
                   org.openjfx/javafx-swing    {:mvn/version "18-ea+4"}
                   org.openjfx/javafx-base     {:mvn/version "18-ea+4"}
                   org.openjfx/javafx-web      {:mvn/version "18-ea+4"}}
      :main-opts  ["-m" "cognitect.rebl"]}

     ;; start smart REPL runner
     :repl
     {:extra-deps {rynkowsg/repl-runner                 {:git/url "https://github.com/rynkowsg/repl-runner" :sha "1e7f6851e123ce6fb1106c6b8ed737cb61e7d264"}
                   com.github.rynkowsg/nrebl.middleware {:mvn/version "0.4.0"}}
      :jvm-opts   ["-XX:-OmitStackTraceInFastThrow"]
      ;; this ensures we have a DynamicClassLoader, which is needed for
      ;; add-lib to work, if we're starting other processes via aliases
      ;; such as a socket REPL or Cognitect's REBL etc
      :main-opts  ["-e" "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
                   "-m" "repl-runner.core"]}

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; PROJECT
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; create a new project
     :new
     {:extra-deps {;; https://clojars.org/seancorfield/clj-new
                   seancorfield/clj-new {:mvn/version "1.1.309"}}
      :exec-fn    clj-new/create}

     :antq
     {:replace-paths []
      :replace-deps  {com.github.liquidz/antq {:mvn/version "1.1.0"}
                      org.slf4j/slf4j-nop     {:mvn/version "1.7.32"}}
      :main-opts     ["-m" "antq.core"]}

     ;; Example of clj-kondo setup
     ;; https://github.com/wilkerlucio/pathom-viz/tree/master/.clj-kondo
     :clj-kondo
     {:replace-deps {clj-kondo/clj-kondo {:mvn/version "2021.09.25"}}
      :main-opts    ["-m" "clj-kondo.main"]}

     :cljfmt
     {:replace-deps {cljfmt/cljfmt {:mvn/version "0.8.0"}}}

     ;; - see https://github.com/rm-hull/nvd-clojure
     ;; - clojure -M:g/nvd "" "$(clojure -Spath -A:any:aliases)"
     :nvd {:extra-deps {nvd-clojure/nvd-clojure {:mvn/version "1.7.0"}}
           :main-opts ["-m" "nvd.task.check"]}

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; BUILDING
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; Uberjar archive of the project, including Clojure runtime
     ;; clojure -X:project/uberjar :main-class domain.application
     ;; clojure -X:project/uberjar :jar '"project-name.jar"' :main-class domain.application
     :uberjar
     {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
      :exec-fn      hf.depstar/uberjar
      :exec-args    {:jar        "target/uberjar.jar"
                     :main-class calc.core
                     :aot        true
                     :compile-ns :all}}

     ; pack.alpha - tool for uberjar'ing
     ; ---
     ; It turns out that depstar (https://github.com/seancorfield/depstar) and
     ; uberdeps (https://github.com/tonsky/uberdeps) don't work with Duct.
     ; The problem is described here: https://github.com/duct-framework/duct/issues/92
     ; Alternative to pack.alpha is using `lein uberjar`, but since I don't want to integrate
     ; Leiningen only for uberjars, I decided to go with pack.alpha.
     ; FYI: "Capsule project is dead"
     ; - https://github.com/juxt/pack.alpha/issues/88
     ; - https://github.com/puniverse/capsule/issues/134
     ; Capsule docs:
     ; https://web.archive.org/web/20191207104737/http://www.capsule.io/
     :pack
     {:extra-deps {pack/pack.alpha {:git/url "https://github.com/juxt/pack.alpha.git"
                                    :sha     "b093f79420fef019faf62a75b888b5e10f4e8cc9"}}}}

 ;; Provider attributes
 :mvn/repos
 {"central"             {:url "https://repo1.maven.org/maven2/"}
  "clojars"             {:url "https://repo.clojars.org/"}
  "sonatype"            {:url "https://oss.sonatype.org/content/repositories/snapshots/"}
  "cognitect-dev-tools" {:url "https://dev-tools.cognitect.com/maven/releases/"}}}
