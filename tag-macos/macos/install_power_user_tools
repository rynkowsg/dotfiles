#!/usr/bin/env bash

# Inspirations:
# - https://github.com/aterreno/macosx-from-scratch/blob/master/Brewfile
# - https://github.com/bkuhlmann/mac_os-config/blob/main/bin/install_homebrew_formulas
# - https://github.com/bkuhlmann/mac_os-config/blob/main/bin/install_homebrew_casks

set -x

# https://unix.stackexchange.com/a/152714
SCRIPT_DIR="$(cd "$(dirname "$([ -L "$0" ] && readlink "$0" || echo "$0")")" || exit 1; pwd -P)"
ROOT_DIR="$(cd "${SCRIPT_DIR}/../.." || exit 1; pwd -P)"

# install common apps/deps
sh "${ROOT_DIR}/.lib/macos/install_common"

#####################
###     SHELL     ###
#####################

# SHELLS
brew install bash bash-completion zsh zsh-completion              # install bash & zsh
function add_shell {
  local path="$1"
  if ! grep -q "${path}" /etc/shells; then
    sudo bash -c "echo \"${path}\" >> /etc/shells"
  fi
}
BASH_PATH="$(brew --prefix)/bin/bash"; add_shell "${BASH_PATH}" # add bash
ZSH_PATH="$(brew --prefix)/bin/zsh";   add_shell "${ZSH_PATH}"  # add zsh
[[ "${SHELL}" != "${ZSH_PATH}" ]] && chsh -s "${ZSH_PATH}"      # change default
echo "SHELL: $SHELL"

# git
brew install svn
brew install git git-lfs git-gui git-cola tig pre-commit
# git-filter-repo - great tool for rewriting history
# https://github.com/newren/git-filter-repo
# https://htmlpreview.github.io/?https://github.com/newren/git-filter-repo/blob/docs/html/git-filter-repo.html#EXAMPLES
brew install git-filter-repo

# gpg
brew install gnupg pinentry-mac gpa paperkey
brew install hopenpgp-tools # linting public key
brew install ykman                         # yubikey manager (CLI)
brew tap homebrew/cask-drivers
brew install --cask homebrew/cask-drivers/yubico-yubikey-manager # yubikey manager (GUI)
brew install --cask gpg-suite
brew install pass gopass    # GPG-based password manager
# https://android.stackexchange.com/questions/239151/why-does-grapheneos-use-signify-instead-of-pgp-to-sign-their-releases-gpg-cryp
brew install signify-osx

# qr
brew install qrencode zbar imagesnap

# GNU utils
brew install coreutils ed findutils gawk gnu-sed gnu-tar grep make
# it requires PATH update at platformrc
#     export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/ed/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/gawk/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
#     export PATH="/usr/local/opt/make/libexec/gnubin:$PATH"

# markup tools
{
  brew install asciidoc asciidoctor
  # asciidoctor **/*.adoc
  # fswatch -o **/*.adoc | xargs -n1 -I{} asciidoctor **/*.adoc
}
# pandoc - universal document converter (md <=> adoc <=> tex <=> docx & more)
brew install pandoc

# common CLI utils
brew install autojump       # shell navigation
brew install curl
brew install exiftool
brew install fswatch
brew install htop
brew install mc
brew install nload          # Realtime console network usage monitor
brew install openssh
brew install prettyping
brew install pv             # data's progress through a pipe
# https://thoughtbot.github.io/rcm/rcm.7.html
# https://thoughtbot.github.io/rcm/rcrc.5.html
brew install rcm
brew install rlwrap
brew install speedtest-cli
brew install tmux
# TODO: install tmux plugins
# https://github.com/smudge/dotfiles/blob/master/setup.sh#L20
brew install tree
{
  brew install vim
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  vim +PlugInstall +PlugClean! +qall
}
brew install weechat        # messenger
# https://github.com/whalebrew/whalebrew
brew install whalebrew      # For dockerizing commands
brew install wget
# https://github.com/ytdl-org/youtube-dl
#brew install youtube-dl # this one seems to be dead
# https://github.com/yt-dlp/yt-dlp
brew install yt-dlp/taps/yt-dlp

# languages / envs
brew install plantuml
# create 'latest' symlink (to use /usr/local/Cellar/plantuml/latest/libexec/plantuml.jar in Obsidian)
bb "${HOME}/.dotfiles/.lib/clj/scripts/update_latest_symlink.clj" "/usr/local/Cellar/plantuml"

{
  brew install python
  # https://towardsdatascience.com/python-environment-101-1d68bda3094d
  # https://binx.io/blog/2019/04/12/installing-pyenv-on-macos/
  # 1. pyenv
  brew install pyenv
  brew install openssl readline sqlite3 xz zlib
  printf "%s\n" "List of available Python envs:"
  pyenv install --list
  echo "N" | pyenv install 2.7.18
  echo "N" | pyenv install 3.9.6
  mkdir -p "$HOME/.pyenv/bin" # pyenv init adds this path to PATH, but it doesn't exist until you install something
  pyenv global 3.9.6
  printf "%s\n" "List of installed Python envs:"
  pyenv versions
  # 2. pyenv-virtualenv
  brew install pyenv-virtualenv
  # 3. pipenv
  # https://pipenv.pypa.io/en/latest/basics/
  # https://pipenv.pypa.io/en/latest/install/#installing-pipenv
  brew install pipenv
}
# ruby
brew install ruby
brew install brew-gem
# go
brew install go
bb "${HOME}/.dotfiles/.lib/clj/scripts/update_latest_symlink.clj" "/usr/local/Cellar/go"
# clojure
brew tap clojure/tools
brew install clojure/tools/clojure leiningen
brew install borkdude/brew/babashka borkdude/brew/jet borkdude/brew/clj-kondo
brew install polyfy/polylith/poly # https://polylith.gitbook.io/poly/install/install/install-on-mac
{
  # tfenv - for terraform, globally and locally in projects
  brew install tfenv
  tfenv install
  # Terraform checkers
  brew install tfsec checkov
  # cf-terraforming - tool of importing state from CloudFlare
  GO111MODULE=on go get -u github.com/cloudflare/cf-terraforming/...
  # TODO: Fix belowwarning
  # go get: installing executables with 'go get' in module mode is deprecated.
  #         Use 'go install pkg@version' instead.
  #         For more information, see https://golang.org/doc/go-get-install-deprecation
  #         or run 'go help get' or 'go help install'.
}
{
  # Java & jenv setup
  brew install jenv
  mkdir -p "${HOME}/.jenv/bin"
  export PATH="${HOME}/.jenv/bin:${PATH}"
  SHELL_OPTS="${-}"; [[ $SHELL_OPTS == *x* ]] && echo "Disable xtrace feature for the 'jenv init'" && set +x
  eval "$(jenv init -)"
  [[ $SHELL_OPTS == *x* ]] && set -x
  jenv enable-plugin export
  jenv enable-plugin maven
  ######  Oracle  ######
  # https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html
  # OTHERWISE proceed
  printf "${GREEN}%s${RESET}\n" "--- Oracle JDK 1.8 ---"
  printf "%s\n" ""
  printf "%s\n" "Download the latest Oracle JDK 1.8 from location below and install it."
  printf "%s\n" "    https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u321-b07/df5ad55fdd604472a86a45a217032c7d/jdk-8u321-macosx-x64.dmg"
  printf "%s\n" ""
  printf "%s\n" "Oracle JDK8 downloads:"
  printf "%s\n" "    https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html"
  printf "%s\n" ""
  printf "%s\n" "Installed JDKs:"
  ls -1 "/Library/Java/JavaVirtualMachines/"
  printf "%s\n" ""
  while true; do
    read -p "Have you finished? " yn
    case $yn in
      [Yy]*) break;; # continue script
      [Nn]*) exit;;
      *) echo "Please answer yes or no.";;
    esac
  done
  # https://www.shellhacks.com/yes-no-bash-script-prompt-confirmation/
  # Oracle
  # https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u301-b09/d3c52aa6bfa54d3ca74e617f18309292/jdk-8u301-macosx-x64.dmg
  # https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u311-b11/4d5417147a92418ea8b615e228bb6935/jdk-8u311-macosx-x64.dmg
  for home_path in /Library/Java/JavaVirtualMachines/jdk*.jdk/Contents/Home; do
    jenv add "$home_path"
  done
  ######  Open JDK  ######
  brew tap adoptopenjdk/openjdk
  printf "%s\n" "List of available adoptopenjdk:"
  brew search adoptopenjdk
  brew install                          \
    adoptopenjdk/openjdk/adoptopenjdk8  \
    adoptopenjdk/openjdk/adoptopenjdk11 \
    adoptopenjdk/openjdk/adoptopenjdk12 \
    adoptopenjdk/openjdk/adoptopenjdk13 \
    adoptopenjdk/openjdk/adoptopenjdk14 \
    adoptopenjdk/openjdk/adoptopenjdk15 \
    adoptopenjdk/openjdk/adoptopenjdk16
#    adoptopenjdk/openjdk/adoptopenjdk9  \
#    adoptopenjdk/openjdk/adoptopenjdk10 \
    # apple complains about these two that they
    # "cannot be opened because the developer cannot be verified"
    # that message happen when I try to add then to jenv
  # add all to jenv
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
#  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-9.jdk/Contents/Home
#  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-10.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-12.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-13.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-14.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-15.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/adoptopenjdk-16.jdk/Contents/Home
  ######  Amazon Corretto  ######
  printf "%s\n" "List of available corretto jdks:"
  brew search corretto
  brew install --cask corretto8 corretto11
  jenv add /Library/Java/JavaVirtualMachines/amazon-corretto-8.jdk/Contents/Home
  jenv add /Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
  ######  GraalVM #######
  # TODO: install graalvm
  # TODO: consider adding Homebrew cask for GraalVM
  # https://www.graalvm.org/docs/getting-started/macos/
  # https://stackoverflow.com/questions/67904532/graalvm-on-macos-catalina
  # https://github.com/oracle/graal/issues/1724
  ###### ALL INSTALLED ######
  printf "%s\n" "List of JavaVirtualMachines:"
#  ls -l /Library/Java/JavaVirtualMachines/
  /usr/libexec/java_home -V
  printf "%s\n" "jenv versions:"
  jenv versions
  jenv shell 1.8
  # Links:
  # - https://kenanhancer.com/2020/05/09/how-to-install-java-with-brew-and-jenv/
  # - https://developer.bring.com/blog/configuring-jenv-the-right-way/
  brew install maven
}
{
  # nvm - to use npm/node only in JS projects locally
  brew install nvm && mkdir -p ~/.nvm
  SHELL_OPTS="${-}"; [[ $SHELL_OPTS == *x* ]] && echo "Disable xtrace feature for the 'nvm' setup" && set +x
  [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && . "$(brew --prefix)/opt/nvm/nvm.sh"
  nvm install --lts
  [[ $SHELL_OPTS == *x* ]] && set -x
}
{
  # yarn - to use npm packages installed globally
  brew install yarn
  yarn global add serverless
  yarn global add npx
  yarn global add nbb # https://github.com/babashka/nbb
}

# https://github.com/ibraheemdev/modern-unix
brew install bat            # new cat
brew install dog            # new dig
brew install fzf            # custom Ctrl+R completion
brew install jq
yarn global add gtop
brew install httpie
brew install tldr           # kinda man

# Virtualization / containerization
brew install --cask virtualbox
{
  brew install --cask docker
  ! command -v docker > /dev/null && open /Applications/Docker.app
}

# cloud
brew install awscli
brew install --cask aws-vault
brew install circleci
brew install --cask google-cloud-sdk

# wordpress
brew install --cask local # localwp.com

# audio / video / graphics
brew install ffmpeg libav
brew install asciinema      # https://asciinema.org/
brew install graphviz
brew install imagemagick
brew install imageoptim-cli
brew install jpegoptim jpeginfo

# macos control
brew install smudge/smudge/nightlight   # managing night shift feature
brew install duti                       # assigning apps for file extensions

#######################
###    NON-SHELL    ###
#######################

# Fonts
brew tap homebrew/cask-fonts
brew install --cask font-roboto
brew install --cask font-fira-code font-fira-mono
brew install --cask font-hack
brew install --cask font-iosevka

# IDEs / Editors
brew install --cask emacs
brew install --cask intellij-idea pycharm webstorm

# Other developer tools
brew install --cask dash        # documentations
brew install --cask imageoptim
brew install --cask iterm2      # terminal
brew install --cask meld
brew install --cask postman

# Non-developer tools
brew install --cask alfred        # keyboard launcher
open /Applications/Alfred\ 4.app
brew install --cask rescuetime    # time tracker
brew install --cask sloth         # GUI for lsof
brew install --cask spectacle     # organising windows using shortcuts
brew install --cask turbo-boost-switcher
# https://apps.apple.com/gb/app/tadam-stay-focused-at-work/id531349534?mt=12
mas install 531349534             # tadam - stay focused-at-work
#brew install --cask veracrypt     # disk encryption software focusing on security based on TrueCrypt

# Non-developer apps
brew install --cask discord
brew install --cask element
