#!/usr/bin/env bash

SCRIPT_DIR="$(cd "$(dirname "$([ -L "$0" ] && readlink "$0" || echo "$0")")" || exit 1; pwd -P)"

# debug log
printf "reading: %s\t\t\t($0)\n" "asdf_setup" >> ~/.dotfiles_log
# includes
. ~/.dotfiles.envs                          # DOTFILES_BASE_PATH
. "${SCRIPT_DIR}/asdf_common"               # ASDF_DIR
. "${DOTFILES_BASE_PATH}/.lib/error"        # error_exit
. "${DOTFILES_BASE_PATH}/.lib/source_utils" # is_sourced
. "${DOTFILES_BASE_PATH}/.lib/trap"         # add_on_exit
. "${DOTFILES_BASE_PATH}/.lib/yes_or_no"    # yes_or_no

#### ASDF ####

ASDF_VER="0.14.0"
ASDF_VER_TAG="v${ASDF_VER}"
ASDF_REPO="https://github.com/asdf-vm/asdf.git"

declare ASDF_DIR # from asdf_common

asdf_is_installed() {
  if [ -d "${ASDF_DIR}" ]; then
    return 0; # true
  else
    return 1; # false
  fi
}

asdf_install() {
  # https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
  git -C "$HOME" -c advice.detachedHead=false clone --branch "${ASDF_VER_TAG}" --depth 1 "${ASDF_REPO}" "${ASDF_DIR}"
}

asdf_update() {
  # https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
  cd "${ASDF_DIR}"
  git -C "${ASDF_DIR}" remote set-url origin "${ASDF_REPO}"
  git -C "${ASDF_DIR}" fetch -t origin
  git -C "${ASDF_DIR}" checkout "${ASDF_VER_TAG}" -b ${ASDF_VER_TAG}
}

asdf_version() {
  asdf --version | sed 's|v\([0-9]*.[0-9]*.[0-9]*\)-.*|\1|'
}

# $1 - expected version
asdf_is_version() {
  local expected_ver="$1"
  if [ "$(asdf_version)" = "${expected_ver}" ]; then
    return 0; # true
  else
    return 1; # false
  fi
}

#### ASDF-PLUGIN-MANAGER ####

ASDF_PLUGIN_MANAGER_ROOT="${HOME}/.asdf/plugins/asdf-plugin-manager"
ASDF_PLUGIN_MANAGER_REPO="https://github.com/asdf-community/asdf-plugin-manager.git"
ASDF_PLUGIN_MANAGER_PLUGIN_VER="ecd1642"
ASDF_PLUGIN_MANAGER_TOOL_VER="1.3.1"
TOOL_NAME="asdf-plugin-manager"

git_clone_specific_ver() {
  local repo_url="${REPO_URL:-}"
  local ver="${VER:-}"
  local dest="${DEST:-}"
  [ -n "${repo_url}" ] || { echo "REPO_URL is required"; exit 1; }
  [ -n "${ver}" ] || { echo "VER is required"; exit 1; }
  [ -n "${dest}" ] || { echo "DEST is required"; exit 1; }
  mkdir -p "${dest}"
  git -C "${dest}" init
  git -C "${dest}" remote add origin "${repo_url}"
  git -C "${dest}" fetch origin
  git -C "${dest}" reset --hard "${ver}"
}

asdf_plugin_manager_detect_coordinates() {
  local repo_url plugin_ver
  local plugins_file="$HOME/.plugin-versions"
  local tools_file="$HOME/.tool-versions"
  local tool_name="${TOOL_NAME}"
  # DETECT PLUGIN COORDINATES

  # Check if the .plugin-versions file exists
  if [[ ! -f "${plugins_file}" ]]; then
    # File doesn't exist, use environment variables
    repo_url="${ASDF_PLUGIN_MANAGER_REPO}"
    plugin_ver="${ASDF_PLUGIN_MANAGER_PLUGIN_VER}"
    >&2 echo "Plugins file ${plugins_file} not found. Using default coordinates."
  elif [[ ! -f "${plugins_file}" ]] && ! grep -q "${tool_name}" "${plugins_file}"; then
    # File exists, but asdf-plugin-manager is not listed there, use environment variables
    repo_url="${ASDF_PLUGIN_MANAGER_REPO}"
    plugin_ver="${ASDF_PLUGIN_MANAGER_PLUGIN_VER}"
    >&2 echo "Plugins file ${plugins_file} found, but ${tool_name} missing in it. Using default coordinates."
  else
    # File exists, and asdf-plugin-manager is there
    while read -r name url ver; do
      if [[ "${name}" == "${tool_name}" ]]; then
          repo_url="${url}"
          plugin_ver="${ver}"
          break
      fi
    done < <(grep "${tool_name}" "${plugins_file}")
    >&2 echo "Detected ${tool_name} coordinates in ${plugins_file}."
  fi

  # Fall back to environment variables if not found
  if [[ -z "${repo_url}" ]] || [[ -z "${plugin_ver}" ]]; then
    >&2 echo "Error: for some reason coordinates missing:"
    >&2 echo "  repl_url:   ${repo_url}"
    >&2 echo "  plugin_ver: ${plugin_ver}"
    repo_url="${ASDF_PLUGIN_MANAGER_REPO}"
    plugin_ver="${ASDF_PLUGIN_MANAGER_PLUGIN_VER}"
    >&2 echo "Using default coordinates."
  fi

  # DETECT TOOL VERSION

  # Check if the .tool-versions file exists
  if [[ ! -f "${tools_file}" ]]; then
    # File doesn't exist, use environment variable
    tool_ver="${ASDF_PLUGIN_MANAGER_TOOL_VER}"
    >&2 echo "Tools file ${tools_file} not found. Using default version."
  elif [[ ! -f "${tools_file}" ]] && ! grep -q "${tool_name}" "${tools_file}"; then
    # File exists, but asdf-plugin-manager is not listed there, use environment variable
    tool_ver="${ASDF_PLUGIN_MANAGER_TOOL_VER}"
    >&2 echo "Tools file ${tools_file} found, but ${tool_name} missing in it. Using default version."
  else
    # File exists, and asdf-plugin-manager is there
    while read -r name ver; do
      if [[ "${name}" == "${tool_name}" ]]; then
          tool_ver="${ver}"
          break
      fi
    done < <(grep "${tool_name}" "${tools_file}")
    >&2 echo "Detected ${tool_name}'s version in ${tools_file}"
  fi

  # Fall back to environment variables if not found
  if [[ -z "${tool_ver}" ]]; then
    >&2 echo "Error: for some reason tool version missing"
    >&2 echo "  tool_ver:   ${tool_ver}"
    tool_ver="${ASDF_PLUGIN_MANAGER_TOOL_VER}"
    >&2 echo "Setting default version."
  fi

  # Return values as a comma-separated string
  echo "${repo_url},${plugin_ver},${tool_ver}"
}

asdf_plugin_manager_is_plugin_installed() {
  if [ -d "${ASDF_PLUGIN_MANAGER_ROOT}" ] &&  asdf plugin-list | grep -qw "${TOOL_NAME}"; then
    return 0; # true
  else
    return 1; # false
  fi
}

asdf_plugin_manager_is_tool_installed() {
  if command -v "${TOOL_NAME}" > /dev/null && "${TOOL_NAME}" version > /dev/null ; then
    return 0; # true
  else
    return 1; # false
  fi
}

asdf_plugin_manager_install_plugin() {
  IFS=',' read -r repo_url plugin_ver tool_ver <<< "$(asdf_plugin_manager_detect_coordinates)"
  [ -n "${repo_url}" ] || { echo "repo_url is required"; exit 1; }
  [ -n "${plugin_ver}" ] || { echo "plugin_ver is required"; exit 1; }
  [ -n "${tool_ver}" ] || { echo "tool_ver is required"; exit 1; }
  REPO_URL="${repo_url}" VER="${plugin_ver}" DEST="${ASDF_PLUGIN_MANAGER_ROOT}" git_clone_specific_ver
}

asdf_plugin_manager_install_tool() {
  IFS=',' read -r repo_url plugin_ver tool_ver <<< "$(asdf_plugin_manager_detect_coordinates)"
  [ -n "${repo_url}" ] || { echo "repo_url is required"; exit 1; }
  [ -n "${plugin_ver}" ] || { echo "plugin_ver is required"; exit 1; }
  [ -n "${tool_ver}" ] || { echo "tool_ver is required"; exit 1; }
  asdf install "${TOOL_NAME}" "${tool_ver}"
  asdf global "${TOOL_NAME}" "${tool_ver}"
  # since this is the first tool installation, install plugins
  asdf_plugin_manager_install_plugins
}

asdf_plugin_manager_install_plugins() {
  if [ -f "${HOME}/.plugin-versions" ]; then
    ! asdf_plugin_manager_is_plugin_installed && { echo "asdf-plugin-manager plugin missing. Can't install plugins." >&2; return 0; }
    ! asdf_plugin_manager_is_tool_installed && { echo "asdf-plugin-manager tool missing. Can't install plugins." >&2; return 0; }
    (
     cd "${HOME}"
     asdf-plugin-manager add-all
    )
  fi
}

#### MAIN ####

main() {
  set -e

  if is_sourced; then
    error_exit "This script can not be sourced, only executed."
    # It is not compatible with ZSH due to trap use.
  fi

  if ! asdf_is_installed; then
    yes_or_no "ASDF not installed. Should install?" && asdf_install || return
  fi

  asdf_load

  if ! asdf_is_version "${ASDF_VER}"; then
    echo "Current ASDF version (`asdf_version`) is different then expected (${ASDF_VER})."
    yes_or_no "Do you want to install expected version?" && asdf_update || return
  fi

  if ! asdf_plugin_manager_is_plugin_installed; then
    yes_or_no "asdf-plugin-manager plugin not installed. Should install?" && asdf_plugin_manager_install_plugin || return
  fi

  if ! asdf_plugin_manager_is_tool_installed; then
    yes_or_no "asdf-plugin-manager tool not installed. Should install?" && asdf_plugin_manager_install_tool || return
  fi
}

main "$@"
