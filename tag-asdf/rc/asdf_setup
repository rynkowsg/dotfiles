#!/usr/bin/env bash

SCRIPT_DIR="$(cd "$(dirname "$([ -L "$0" ] && readlink "$0" || echo "$0")")" || exit 1; pwd -P)"

# debug log
printf "reading: %s\t\t\t($0)\n" "asdf_setup" >> ~/.dotfiles_log
# includes
. ~/.dotfiles.envs                          # DOTFILES_BASE_PATH
. "${SCRIPT_DIR}/asdf_common"               # ASDF_DIR
. "${DOTFILES_BASE_PATH}/.lib/error"        # error_exit
. "${DOTFILES_BASE_PATH}/.lib/source_utils" # is_sourced
. "${DOTFILES_BASE_PATH}/.lib/trap"         # add_on_exit
. "${DOTFILES_BASE_PATH}/.lib/yes_or_no"    # yes_or_no

ASDF_VER="0.14.0"
ASDF_VER_TAG="v${ASDF_VER}"
ASDF_REPO="https://github.com/asdf-vm/asdf.git"

declare ASDF_DIR # from asdf_common

asdf_is_installed() {
  if [ -d "${ASDF_DIR}" ]; then
    return 0; # true
  else
    return 1; # false
  fi
}

asdf_install() {
  # https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
  git -C "$HOME" -c advice.detachedHead=false clone --branch "${ASDF_VER_TAG}" --depth 1 "${ASDF_REPO}" "${ASDF_DIR}"
}

asdf_update() {
  # https://asdf-vm.com/guide/getting-started.html#_3-install-asdf
  cd "${ASDF_DIR}"
  git -C "${ASDF_DIR}" remote set-url origin "${ASDF_REPO}"
  git -C "${ASDF_DIR}" fetch -t origin
  git -C "${ASDF_DIR}" checkout "${ASDF_VER_TAG}" -b ${ASDF_VER_TAG}
}

asdf_version() {
  asdf --version | sed 's|v\([0-9]*.[0-9]*.[0-9]*\)-.*|\1|'
}

# $1 - expected version
asdf_is_version() {
  local expected_ver="$1"
  if [ "$(asdf_version)" = "${expected_ver}" ]; then
    return 0; # true
  else
    return 1; # false
  fi
}

declare -A plugins
plugins["aws-vault"]="https://github.com/karancode/asdf-aws-vault.git"
plugins["awscli"]="https://github.com/MetricMike/asdf-awscli.git"
plugins["babashka"]="https://github.com/fredZen/asdf-babashka.git"
plugins["bats"]="https://github.com/timgluz/asdf-bats.git"
plugins["circleci-cli"]="https://github.com/ucpr/asdf-circleci-cli.git"
plugins["clj-kondo"]="https://github.com/rynkowsg/asdf-clj-kondo.git"
plugins["clojure"]="https://github.com/halcyon/asdf-clojure.git"
plugins["golang"]="https://github.com/asdf-community/asdf-golang.git"
plugins["gradle"]="https://github.com/rfrancis/asdf-gradle.git"
plugins["hugo"]="https://github.com/NeoHsu/asdf-hugo.git"
plugins["java"]="https://github.com/halcyon/asdf-java.git"
#plugins["lein"]="https://github.com/miorimmax/asdf-lein.git"
plugins["lein"]="https://github.com/rynkowsg/asdf-lein.git"
plugins["nodejs"]="https://github.com/asdf-vm/asdf-nodejs.git"
plugins["opentofu"]="https://github.com/rynkowsg/asdf-opentofu.git"
plugins["python"]="https://github.com/asdf-community/asdf-python.git"
plugins["shellcheck"]="https://github.com/luizm/asdf-shellcheck.git"
plugins["shfmt"]="https://github.com/luizm/asdf-shfmt.git"
plugins["terraform"]="https://github.com/asdf-community/asdf-hashicorp.git"
plugins["terragrunt"]="https://github.com/ohmer/asdf-terragrunt.git"
plugins["tflint"]="https://github.com/skyzyx/asdf-tflint.git"
plugins["tfsec"]="https://github.com/woneill/asdf-tfsec.git"
plugins["yq"]="https://github.com/sudermanjr/asdf-yq.git"

declare plugins_installed

# $1 - plugin name
is_plugin_installed() {
  # init plugins_installed (at first run)
  # (it can't be run earlier at the script loading, because asdf is not yet known)
  if [[ -z $plugins_installed ]]; then
    mapfile -t plugins_installed < <(asdf plugin list)
  fi
  # check
  if [[ "${plugins_installed[*]}" =~ $1 ]]; then
    return 0; # true
  else
    return 1; # false
  fi
}

# $1 - plugin name
# $2 - tool version
is_tool_installed() {
  local -r plugin_name="$1"
  local -r tool_version="$2"

  if asdf list "${plugin_name}" | grep -q "${tool_version}"; then
    return 0; # true
  else
    return 1; # false
  fi
}

asdf_install_plugins() {
  local tmp_tools_versions
  tmp_tools_versions=$(mktemp "/tmp/dotfiles-tmp-tool-versions.XXX")
  add_on_exit rm -f "${tmp_tools_versions}"

  # filter out all comments and empty lines
  grep -v -E "^#|^$" "${HOME}/.tool-versions" > "${tmp_tools_versions}"

  # read plugins
  declare -A tools
  while IFS= read -r line; do
    read -r plugin version <<< "$line"
    tools["$plugin"]="$version"
  done < "${tmp_tools_versions}"

  # install plugins
  for plugin in "${!tools[@]}"; do
    local plugin_url="${plugins[${plugin}]}"
    if [ -z "${plugin_url}" ]; then
      echo "Plugin URL is not defined for plugin '${plugin}'!"
    fi
#    echo "plugin_url[$plugin]: ${plugin_url}"
    if ! is_plugin_installed "${plugin}"; then
      asdf plugin-add "${plugin}" "${plugin_url}"
      echo "Plugin '${plugin}' installed from url: ${plugin_url}."
    fi
  done

  # install tools in requested version
  for plugin in "${!tools[@]}"; do
    local version="${tools[${plugin}]}"
    if ! is_tool_installed "${plugin}" "${version}"; then
      echo "Tool '${plugin}' in version '${version}' is not installed."
      yes_or_no "Should install?" && \
        asdf install "${plugin}" "${version}"
    fi
  done
}

main() {
  set -e

  if is_sourced; then
    error_exit "This script can not be sourced, only executed."
    # It is not compatible with ZSH due to trap use.
  fi

  if ! asdf_is_installed; then
    yes_or_no "ASDF not installed. Should install?" && asdf_install || return
  fi

  asdf_load

  if ! asdf_is_version "${ASDF_VER}"; then
    echo "Current ASDF version (`asdf_version`) is different then expected (${ASDF_VER})."
    yes_or_no "Do you want to install expected version?" && asdf_update || return
  fi

  asdf_install_plugins;
}

main "$@"
