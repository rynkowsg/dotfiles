echo "dotfiles/home/common_rc"

#################################################
#########  ENVIRONMENT VARS SETUP     ###########

export PATH="/usr/local/bin:$PATH"  # To favour bins from /usr/local

####
# ant, maven, gradle
# http://stackoverflow.com/questions/3222804/how-can-i-install-apache-ant-on-mac-os-x#comment54866948_20984975
# leave ANT_HOME empty, because it causes problems on OS X
export ANT_ROOT="/usr/local/opt/ant"
#export ANT_HOME="${ANT_ROOT}/bin"
export MAVEN_HOME=/usr/local/opt/maven
export GRADLE_HOME=/usr/local/opt/gradle
# Add environment variable ANT_ROOT to PATH (for cocos2d-x)
export PATH="${ANT_ROOT}/bin:${PATH}"



####
# Android

export ANDROID_SDK_ROOT=/usr/local/opt/android-sdk
export ANDROID_SDK_HOME="${ANDROID_SDK_ROOT}"
export ANDROID_HOME="${ANDROID_SDK_ROOT}"
#export ANDROID_NDK_ROOT=/usr/local/opt/android-ndk
#export ANDROID_NDK_HOME="${ANDROID_NDK_ROOT}"



####
# Cocos2d-x settings

# Add environment variable COCOS_X_ROOT for cocos2d-x
export COCOS_X_ROOT=/Users/greg/src/greg
#export PATH="${COCOS_X_ROOT}:${PATH}"

# Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x
export COCOS_CONSOLE_ROOT="${COCOS_X_ROOT}/cocos2d-x/tools/cocos2d-console/bin"
export PATH=$COCOS_CONSOLE_ROOT:$PATH

# Add environment variable COCOS_TEMPLATES_ROOT for cocos2d-x
export COCOS_TEMPLATES_ROOT="${COCOS_X_ROOT}/cocos2d-x/templates"
export PATH=$COCOS_TEMPLATES_ROOT:$PATH

# Add environment variable NDK_ROOT for cocos2d-x
export NDK_ROOT=${ANDROID_NDK_ROOT}
export PATH=$NDK_ROOT:$PATH

# Add environment variable ANDROID_SDK_ROOT for cocos2d-x
export PATH="${ANDROID_SDK_ROOT}:${PATH}"
export PATH="${ANDROID_SDK_ROOT}/tools:${ANDROID_SDK_ROOT}/tools/bin:${PATH}"
export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
export PATH="${ANDROID_SDK_ROOT}/build-tools/latest:${PATH}"


####
# fuse2ext
export PATH="/usr/local/opt/e2fsprogs/bin:$PATH"
export PATH="/usr/local/opt/e2fsprogs/sbin:$PATH"


# gettext
export PATH="/usr/local/opt/gettext/bin:$PATH"


# NVM
export NVM_DIR=$(cd -P "$HOME/.nvm" && pwd)
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# https://stackoverflow.com/questions/9910966/how-to-tell-if-its-using-zsh-or-bash
if [ -n "$ZSH_VERSION" ]; then
#  echo "zsh_completion for NVM doesn't exist"
elif [ -n "$BASH_VERSION" ]; then
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
else
  echo "shell completition for your shell $SHELL can't be loaded"
fi

# SDK MAN
#export SDKMAN_DIR="${HOME}/.sdkman"
#[[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && source "${SDKMAN_DIR}/bin/sdkman-init.sh"


#export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-10.0.1.jdk/Contents/Home/
#for Android SDK tools:
#export JAVA_HOME="/Applications/Android\ Studio.app/Contents/jre/jdk/Contents/Home"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/

# jenv
#export PATH="$HOME/.jenv/bin:$PATH"
#eval "$(jenv init -)"



#################################################
#########  ENVIRONMENT VARS SETUP     ###########

# For Homebrew to call GitHub without limit of requests
export HOMEBREW_GITHUB_API_TOKEN=cb324594b0f26a69fcae23dcc0acca8847401b38

## Loads SSH identities
ssh-add ~/.ssh/id_rsa
ssh-add ~/.ssh/id_rsa_hopster
