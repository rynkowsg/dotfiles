#!/usr/bin/env bash

# shellcheck disable=SC2002

# includes
. "$HOME/.dotfiles/.lib/error"
. "$HOME/.dotfiles/.lib/install_dotfiles_deps"
. "$HOME/.dotfiles/.lib/shell_utils" # run_parts_safe
. "$HOME/.dotfiles/.lib/trap"
. "$HOME/.dotfiles/.lib/yes_or_no"

install_deps() {
  info "Installing dotfiles deps..."
  install_dotfiles_deps
  info "Installing dotfiles deps... DONE"
  echo
}

import_gpg_key() {
  info "Importing my gpg key..."
  gpg --import < ~/.dotfiles/.data/gpg/gpg-0x6762037B92E2622E-2023-10-05-public-with-4-uids.asc
  info "Importing my gpg key... DONE"
  echo
}

install_ssh_auth() {
  # restart gpg agent
  gpg-connect-agent /bye; gpgconf --launch gpg-agent

  # check YubiKey inserted
  if ! gpg --card-status &>/dev/null; then
    error "Failed to create ~/.ssh/id_rsa_yubikey.pub!"
    error "Can't find YubiKey"
    exit 1
  fi

  # export key from SSH agent
  if ssh-add -L | grep -q "cardno"; then
    mkdir -p ~/.ssh
    ssh-add -L | grep "cardno" > ~/.ssh/id_rsa_yubikey.pub
    info "Created ~/.ssh/id_rsa_yubikey.pub"
  else
    error "YubiKey key not found in ssh agent"
    exit 1
  fi

  echo
}

# $1 - host name
# env var DOTFILES_DIRS - list of
find_host_dir() {
  local -r hostname=$1
  find_opts=()
  find_opts+=("-L") # ensure it follows symbolic links
  IFS=' :' read -r -a dotfiles_dirs_array <<< "${DOTFILES_DIRS}"
  if [ ${#dotfiles_dirs_array[@]} -eq 0 ]; then
    dotfiles_dirs_array=("${HOME}/.dotfiles")
  fi
  find_opts+=("${dotfiles_dirs_array[@]}")
  find_opts+=("-name" "host-${hostname}")

  local result
  >&2  echo "find ${find_opts[@]}"
  result=$(find "${find_opts[@]}")

  # Count the number of lines in the result
  local count
  count=$(echo "%s" "$result" | wc -l)

  if [[ -n "$result" && $count -eq 1 ]]; then
    echo "$result"
  elif [[ $count -gt 1 ]]; then
    # If more than one directory is found, print an error and return empty string
    >&2 echo "Error: Multiple directories found for host-${hostname}."
    echo $result
    exit 1
  else
    echo ""
  fi
}

host_dir_exists() {
  local -r hostname=$1

  local result
  result=$(find_host_dir "$hostname")
  if [[ -n "$result" ]]; then
    echo "directory for $hostname NOT found"
    return 0
  else
    echo "directory for $hostname found"
    return 1
  fi
}

# $1 - should_confirm
link_dotfiles() {
  local -r should_confirm="$1"

  info "Installing dotfiles..."

  local -r tmp_dir=$(mktemp -d -t "dotfiles-$(date +%Y%m%d_%H%M%S)-XXXXXXXX")
  add_on_exit rm -rf "${tmp_dir}" \&\& echo "Cleanup: removed $tmp_dir"

  local -r install_script="${tmp_dir}/install.sh"

  DOTFILES_DIRS="${DOTFILES_DIRS:-"${HOME}/.dotfiles"}" # list of paths separated by space or :
  # Note about DOTFILES_DIR:
  # To access more then one directory, either you can:
  # - provide multiple paths with `-d` param (man rcup)
  # - provide paths with DOTFILES_DIRS in rcrc file
  # rcm doesn't support env vars, so `rcup` doesn't read `DOTFILES_DIRS` env var.
  # The code below translates env var to `-d` params.

  # generate a shell script installing all the links
  local rcup_opts=()
  rcup_opts+=("-g") # print to stdout
  rcup_opts+=("-x" '"README.md:.internal"') # sample exclude

  # Add -d parameter for each path in DOTFILES_DIRS
  IFS=' :' read -r -a dotfiles_dirs_array <<< "${DOTFILES_DIRS}"
  for dir in "${dotfiles_dirs_array[@]}"; do
    rcup_opts+=("-d" "${dir}")
  done

  local target_host host_dir
  target_host="$(hostname)"
  host_dir="$(find_host_dir "${target_host}")"
  if [ -z "${host_dir}" ]; then
    target_host="default-linux"
    >&2 echo "Directory targeting hostname '${target_host}' not found. Changed taget to '${target_host}'."
  fi
  host_dir="$(find_host_dir "${target_host}")"
  >&2 echo "Directory targeting hostname '${target_host}' found: ${host_dir}"
  rcup_opts+=(-B "${target_host}")
  >&2 echo "${host_dir}/rcrc rcup ${rcup_opts[@]}"
  RCRC="${host_dir}/rcrc" rcup "${rcup_opts[@]}" > "${install_script}"

  printf "%s\n" "---------------------------------------------------------------"
  printf "%s\n" "---               FILES TO LINK                            ----"
  printf "%s\n" "---------------------------------------------------------------"
  cat "${install_script}" | grep -E "handle_file_ln \"|handle_file_cp \"" | sort
  printf "%s\n" "---------------------------------------------------------------"

  if [ "$should_confirm" = "true" ]; then
    if ! yes_or_no "Do you want to execute this script?"; then echo; return; fi
  fi
  echo

  # TODO: add processing all scripts from ~/.rc/cleanup
  # TODO: move rc_aliases to rc/aliases, same for updates
  rm -rf ~/.rc ~/.rc_aliases ~/.rc_update

  # execute the script answering yes to any override questions
  yes | env VERBOSE=1 sh "${install_script}"
  echo

  info "Installing dotfiles... DONE"
  echo
}

init_templates_processing() {
  rm -rf ~/.rc_templates
  add_on_exit rm -rf ~/.rc_templates \&\& echo "Cleanup: removed ~/.rc_templates"
}

remove_rc_aliases() {
  rm -rf ~/.rc_aliases
}

fill_templates() {
  info "Filling templates..."
  run_parts_safe "$HOME/.rc_templates"
  info "Filling templates... DONE"
  echo
}

# $1 - should_confirm
main() {
  local -r should_confirm="$1"
  init_templates_processing
  remove_rc_aliases
  install_deps
  import_gpg_key
  link_dotfiles "$should_confirm"

  # asks to download pass-store repos, loads gpg config
  source ~/.dotfiles/commonrc

  # do rest that relies on reloaded config
  fill_templates

  # setup gpg+ssh
  [ -f ~/.rc/setup_gpg_ssh ] && install_ssh_auth
}

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  [[ -n "${BASH_SOURCE[0]}" ]] && printf "%s\n\n" "Loaded: ${BASH_SOURCE[0]}"
else
  main "$@"
fi

# TODO: inject secrets per environment, per machine name
## checkout password stores
#mkdir -p ~/.password-store
#[ ! -d ~/.password-store/rynkowski ] && \
#    git clone git@github.com:rynkowsg/rynkowski-pass-store.git ~/.password-store/rynkowski
#[ ! -d ~/.password-store/chargedup ] && \
#    git clone git@github.com:rynkowsg/chargedup-pass-store.git ~/.password-store/chargedup
#
#bash "$HOME/.dotfiles/.internal/inject_secrets.sh"
